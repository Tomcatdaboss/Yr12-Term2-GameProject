using System.Collections.Generic;
using UnityEngine;
public class PlayerDataManager : MonoBehaviour
{
    public static PlayerDataManager instance;
    public GameObject player;
    public GameObject enemy1;
    public GameObject enemy2;
    public GameObject enemy3;
    public GameObject enemy4;
    public GameObject enemy5;
    public GameObject enemy6;
    private int iterate_names;
    private int iterate_quants;
    private int iterate_constructs_coords;
    private int iterate_constructs_tags;
    public List <GameObject> SlotList;
    public List <GameObject> ConstructList;
    public GameObject campfire;
    void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
    }
    void Start()
    {
        string path = Application.persistentDataPath + "/playerData.json"; // finds the saved playerData
        if (System.IO.File.Exists(path))
        { // if there has been a save in the past then:
            string json = System.IO.File.ReadAllText(path);
            PlayerData loadedData = JsonUtility.FromJson<PlayerData>(json); // reads the saved playerData and creates a new instance of playerData called loadedData with the information from the save in it
            MenuManager.instance.XP_slider_obj.value = loadedData.maxXp;
            MenuManager.instance.HP_slider_obj.value = loadedData.maxHp;
            MenuManager.instance.HT_slider_obj.value = loadedData.maxHT;
            MenuManager.instance.Dmg_slider_obj.value = loadedData.maxDmg;
        }
    }
    void Update()
    {
        if(Input.GetKeyDown(KeyCode.Q)){ // buttons to save and load the savefile.
            SaveGame();
        }
        if(Input.GetKeyDown(KeyCode.L)){
            LoadGame();
        }
    }
    public void SaveGame() {
        iterate_names = 0; // initialising values
        iterate_quants = 0;  
        iterate_constructs_coords = 0;
        iterate_constructs_tags = 0;      
        PlayerData playerData = new PlayerData(); // creates new instance of playerData
        playerData.player_position = new float [] {player.transform.position.x, player.transform.position.y, player.transform.position.z}; // saving player position
        playerData.healthperc = Hud.instance.hperc; // saving stats
        playerData.stamina = Hud.instance.stamina;
        playerData.hunger = Hud.instance.hunger;
        playerData.thirst = Hud.instance.thirst;
        playerData.level = Hud.instance.XP_level;
        playerData.xp = Hud.instance.xp;
        playerData.maxXp = Hud.instance.maxXP;
        playerData.maxHp = Hud.instance.maxHealth;
        playerData.maxHT = Hud.instance.maxHunger;
        playerData.maxDmg = player.GetComponent<Inventory>().player_dmg;
        playerData.tut_step = Hud.instance.tutorialstep;
        playerData.current_equip = player.GetComponentInChildren<EquipController>().current_obj_selected; // saving equipped object
        playerData.enemy_health_1 = enemy1.GetComponent<EnemyMovement>().health; // saving enemy health and position
        playerData.enemy_health_2 = enemy2.GetComponent<EnemyMovement>().health;
        playerData.enemy_health_3 = enemy3.GetComponent<EnemyMovement>().health;
        playerData.enemy_health_4 = enemy4.GetComponent<EnemyMovement>().health;
        playerData.enemy_health_5 = enemy5.GetComponent<EnemyMovement>().health;
        playerData.enemy_health_6 = enemy6.GetComponent<EnemyMovement>().health;
        playerData.enemy_position_1 = new float [] {enemy1.transform.position.x, enemy1.transform.position.y, enemy1.transform.position.z};
        playerData.enemy_position_2 = new float [] {enemy2.transform.position.x, enemy2.transform.position.y, enemy2.transform.position.z};
        playerData.enemy_position_3 = new float [] {enemy3.transform.position.x, enemy3.transform.position.y, enemy3.transform.position.z};
        playerData.enemy_position_4 = new float [] {enemy4.transform.position.x, enemy4.transform.position.y, enemy4.transform.position.z};
        playerData.enemy_position_5 = new float [] {enemy5.transform.position.x, enemy5.transform.position.y, enemy5.transform.position.z};
        playerData.enemy_position_6 = new float [] {enemy6.transform.position.x, enemy6.transform.position.y, enemy6.transform.position.z};
        while (iterate_names <= 18) { // goes throguh inventory and adds all the names of the slots in the slotlist to the playerData instance
            playerData.slot_name_list.Add(SlotList[iterate_names].GetComponent<Slot>().item_name);            
            iterate_names += 1;
        }
        while (iterate_quants <= 18) { // goes through inventory and adds all the quanities of items of the slots in the slotlist to the playerData instance
            playerData.slot_quantity_list.Add(SlotList[iterate_quants].GetComponent<Slot>().quantity);
            iterate_quants += 1;
        }
        if(ConstructList.Count > 0){ // if there are any constructs currently, this goes through the list and records their positions and tags in the playerData instance
            while (iterate_constructs_coords < ConstructList.Count) {
                playerData.recorded_construct_coords.Add(ConstructList[iterate_constructs_coords].transform.position.x);
                playerData.recorded_construct_coords.Add(ConstructList[iterate_constructs_coords].transform.position.y);
                playerData.recorded_construct_coords.Add(ConstructList[iterate_constructs_coords].transform.position.z);
                iterate_constructs_coords += 1;
            }
            while (iterate_constructs_tags < ConstructList.Count) {
            playerData.recorded_construct_tags.Add(ConstructList[iterate_constructs_tags].tag);
            iterate_constructs_tags += 1;
            }
        }
        string json = JsonUtility.ToJson(playerData); // serialises the playerData instance and saves it in a json file.
        string path = Application.persistentDataPath + "/playerData.json";
        System.IO.File.WriteAllText(path, json);
        
    }
    public void LoadGame() {
        string path = Application.persistentDataPath + "/playerData.json"; // finds the saved playerData
        if (System.IO.File.Exists(path)){ // if there has been a save in the past then:
            iterate_names = 0; // initialising values
            iterate_quants = 0; 
            iterate_constructs_coords = 0;
            iterate_constructs_tags = 0;
            string json = System.IO.File.ReadAllText(path);
            PlayerData loadedData = JsonUtility.FromJson<PlayerData>(json); // reads the saved playerData and creates a new instance of playerData called loadedData with the information from the save in it
            int current_constructnum = ConstructList.Count;
            iterate_constructs_tags = 0;
            Vector3 loadedPosition = new Vector3(loadedData.player_position[0], loadedData.player_position[1], loadedData.player_position[2]);
            player.transform.position = loadedPosition;
            player.GetComponent<Rigidbody>().MovePosition(loadedPosition);
            Hud.instance.hperc = loadedData.healthperc; // resets stats to their loaded values
            Hud.instance.stamina = loadedData.stamina;
            Hud.instance.hunger = loadedData.hunger;
            Hud.instance.thirst = loadedData.thirst;
            Hud.instance.XP_level = loadedData.level;
            Hud.instance.xp = loadedData.xp;
            Hud.instance.tutorialstep = loadedData.tut_step;
            Hud.instance.maxXP = loadedData.maxXp;
            Hud.instance.maxHealth = loadedData.maxHp;
            Hud.instance.health = loadedData.healthperc * loadedData.maxHp;
            Hud.instance.maxHunger = loadedData.maxHT;
            player.GetComponent<Inventory>().player_dmg = loadedData.maxDmg;
            player.GetComponentInChildren<EquipController>().current_obj_selected = loadedData.current_equip; // replaces current object with the loaded object

            enemy1.GetComponent<EnemyMovement>().health = loadedData.enemy_health_1; // loads enemy heath and position
            enemy1.transform.position = new Vector3(loadedData.enemy_position_1[0], loadedData.enemy_position_1[1], loadedData.enemy_position_1[2]);
            Vector3 loadedPosition_enemy1 = new Vector3(loadedData.enemy_position_1[0], loadedData.enemy_position_1[1], loadedData.enemy_position_1[2]);
            enemy1.transform.position = loadedPosition_enemy1;

            enemy2.GetComponent<EnemyMovement>().health = loadedData.enemy_health_2; // loads enemy heath and position
            enemy2.transform.position = new Vector3(loadedData.enemy_position_2[0], loadedData.enemy_position_2[1], loadedData.enemy_position_2[2]);
            Vector3 loadedPosition_enemy2 = new Vector3(loadedData.enemy_position_2[0], loadedData.enemy_position_2[1], loadedData.enemy_position_2[2]);
            enemy2.transform.position = loadedPosition_enemy2;

            enemy3.GetComponent<EnemyMovement>().health = loadedData.enemy_health_3; // loads enemy heath and position
            enemy3.transform.position = new Vector3(loadedData.enemy_position_3[0], loadedData.enemy_position_3[1], loadedData.enemy_position_3[2]);
            Vector3 loadedPosition_enemy3 = new Vector3(loadedData.enemy_position_3[0], loadedData.enemy_position_3[1], loadedData.enemy_position_3[2]);
            enemy3.transform.position = loadedPosition_enemy3;

            enemy4.GetComponent<EnemyMovement>().health = loadedData.enemy_health_4; // loads enemy heath and position
            enemy4.transform.position = new Vector3(loadedData.enemy_position_4[0], loadedData.enemy_position_4[1], loadedData.enemy_position_4[2]);
            Vector3 loadedPosition_enemy4 = new Vector3(loadedData.enemy_position_4[0], loadedData.enemy_position_4[1], loadedData.enemy_position_4[2]);
            enemy4.transform.position = loadedPosition_enemy4;

            enemy5.GetComponent<EnemyMovement>().health = loadedData.enemy_health_5; // loads enemy heath and position
            enemy5.transform.position = new Vector3(loadedData.enemy_position_5[0], loadedData.enemy_position_5[1], loadedData.enemy_position_5[2]);
            Vector3 loadedPosition_enemy5 = new Vector3(loadedData.enemy_position_5[0], loadedData.enemy_position_5[1], loadedData.enemy_position_5[2]);
            enemy5.transform.position = loadedPosition_enemy5;

            enemy6.GetComponent<EnemyMovement>().health = loadedData.enemy_health_6; // loads enemy heath and position
            enemy6.transform.position = new Vector3(loadedData.enemy_position_6[0], loadedData.enemy_position_6[1], loadedData.enemy_position_6[2]);
            Vector3 loadedPosition_enemy6 = new Vector3(loadedData.enemy_position_6[0], loadedData.enemy_position_6[1], loadedData.enemy_position_6[2]);
            enemy6.transform.position = loadedPosition_enemy6;
            while (iterate_names <= 18) // loads the names of the items in the slots
            {
                SlotList[iterate_names].GetComponent<Slot>().item_name = loadedData.slot_name_list[iterate_names];
                iterate_names += 1;
            }
            while (iterate_quants <= 18) // loads the quantities of the items in the slots.
            {
                SlotList[iterate_quants].GetComponent<Slot>().quantity = loadedData.slot_quantity_list[iterate_quants];
                iterate_quants += 1;
            }
            if (current_constructnum > 0){ // if there are any constructs, goes through and deletes any constructs from the game
                iterate_constructs_tags = 0;
                while (iterate_constructs_tags < current_constructnum){
                    GameObject current_object = ConstructList[iterate_constructs_tags];
                    ConstructList.Remove(current_object);
                    Destroy(current_object);
                    iterate_constructs_tags += 1;
                }
                iterate_constructs_tags = 0;
            }
            if (loadedData.recorded_construct_tags.Count > 0) {    // places the saved constructs at their loaded positions and recalls what tags - or what - they are
                while (iterate_constructs_coords < loadedData.recorded_construct_coords.Count)
                {
                    Vector3 spawn_position = new Vector3(loadedData.recorded_construct_coords[iterate_constructs_coords],loadedData.recorded_construct_coords[iterate_constructs_coords + 1],loadedData.recorded_construct_coords[iterate_constructs_coords + 2]);
                    if (loadedData.recorded_construct_tags[iterate_constructs_tags] == "Campfire"){
                        player.GetComponent<Inventory>().SpawnConstruct(campfire, spawn_position);
                    }
                    iterate_constructs_coords += 3;
                    iterate_constructs_tags += 1;
                }
            }
        }
    }
    public void DeathResetGame() { // this function is called on death, it wipes the inventory apart from the equips, and returns the position of the player and their stats to their starting values
        iterate_names = 4; // resets stats to original values
        iterate_quants = 4;
        player.GetComponentInChildren<EquipController>().current_obj_selected = "empty";
        player.GetComponent<Rigidbody>().MovePosition(Hud.instance.RespawnPointTransform.position);
        Hud.instance.health = Hud.instance.maxHealth;
        Hud.instance.stamina = 100;
        Hud.instance.hunger = Hud.instance.maxHunger;
        Hud.instance.thirst = Hud.instance.maxHunger;
        while (iterate_names <= 18) // clears inventory
        {
            SlotList[iterate_names].GetComponent<Slot>().item_name = "empty";
            iterate_names += 1;
        }
        while (iterate_quants <= 18)
        {
            SlotList[iterate_quants].GetComponent<Slot>().quantity = 0;
            iterate_quants += 1;
        }
    }
    public void ClearSave() { // this function is called when the clearsave button is clicked, it wipes everything and returns everything to the starting values
        iterate_names = 2;
        iterate_quants = 2;
        int current_constructnum = ConstructList.Count;
        player.GetComponent<Rigidbody>().MovePosition(Hud.instance.RespawnPointTransform.position);
        Hud.instance.health = Hud.instance.maxHealth; // resets stats
        Hud.instance.stamina = 100;
        Hud.instance.hunger = 100;
        Hud.instance.thirst = 100;
        Hud.instance.xp = 0;
        Hud.instance.XP_level = 0;
        Hud.instance.tutorialstep = 0;
        MenuManager.instance.XP_slider_obj.value =  Hud.instance.maxXP;
        MenuManager.instance.HP_slider_obj.value =  Hud.instance.maxHealth;
        MenuManager.instance.HT_slider_obj.value = Hud.instance.maxHunger;
        MenuManager.instance.Dmg_slider_obj.value = player.GetComponent<Inventory>().player_dmg;
        if (current_constructnum > 0){ // if there are any constructs, goes through and deletes any constructs from the game
            iterate_constructs_tags = 0;
            while (iterate_constructs_tags < current_constructnum){
                GameObject current_object = ConstructList[iterate_constructs_tags];
                ConstructList.Remove(current_object);
                Destroy(current_object);
                iterate_constructs_tags += 1;
            }
            iterate_constructs_tags = 0;
        }
        while (iterate_names <= 18) // clears inventory
        {
            SlotList[iterate_names].GetComponent<Slot>().item_name = "empty";
            iterate_names += 1;
        }
        while (iterate_quants <= 18)
        {
            SlotList[iterate_quants].GetComponent<Slot>().quantity = 0;
            iterate_quants += 1;
        }
        player.GetComponent<Inventory>().boat_obj.GetComponent<Transform>().localScale = new Vector3(0,0,0);
        ResetEnemyPositions();
        SaveGame();
    }
    public void ResetEnemyPositions(){ // this function resets all enemies to their original positions and health.
        enemy1.GetComponent<EnemyMovement>().health = enemy1.GetComponent<EnemyMovement>().max_health; // loads enemy heath and position
        enemy1.transform.position = enemy1.GetComponent<EnemyMovement>().spawn;
        enemy2.GetComponent<EnemyMovement>().health = enemy2.GetComponent<EnemyMovement>().max_health; // loads enemy heath and position
        enemy2.transform.position = enemy2.GetComponent<EnemyMovement>().spawn;
        enemy3.GetComponent<EnemyMovement>().health = enemy3.GetComponent<EnemyMovement>().max_health; // loads enemy heath and position
        enemy3.transform.position = enemy3.GetComponent<EnemyMovement>().spawn;
        enemy4.GetComponent<EnemyMovement>().health = enemy4.GetComponent<EnemyMovement>().max_health; // loads enemy heath and position
        enemy4.transform.position = enemy4.GetComponent<EnemyMovement>().spawn;
        enemy5.GetComponent<EnemyMovement>().health = enemy5.GetComponent<EnemyMovement>().max_health; // loads enemy heath and position
        enemy5.transform.position = enemy5.GetComponent<EnemyMovement>().spawn;
        enemy6.GetComponent<EnemyMovement>().health = enemy6.GetComponent<EnemyMovement>().max_health; // loads enemy heath and position
        enemy6.transform.position = enemy6.GetComponent<EnemyMovement>().spawn;
    }
    void OnApplicationQuit(){ // saves game on quit if the player isn't in the menu at the time
        if(player.transform.position.x <= Hud.instance.DeathSceneTransform.position.x + 10 && player.transform.position.x >= Hud.instance.DeathSceneTransform.position.x - 10 && player.transform.position.x <= Hud.instance.DeathSceneTransform.position.x + 10 && player.transform.position.z >= Hud.instance.DeathSceneTransform.position.z - 10){
        } else {
            SaveGame();
        }
    }
}
