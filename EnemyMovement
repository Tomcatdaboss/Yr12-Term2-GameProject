using JetBrains.Annotations;
using UnityEngine;

public class EnemyMovement : MonoBehaviour
{
    public Transform player;
    private bool player_found = false;
    private bool at_position = true;
    public GameObject detector;
    public Animator animator;
    public GameObject enemybody;
    public float health;
    public int max_health;
    public float turnrad;
    public float new_x;
    public float new_z;
    private bool attack_lock;
    public int minimum_distance;
    private bool is_moving = true;
    private bool is_dead = false;
    public Vector3 spawn;
    public float starttime;
    public float endtime;

    // Start is called before the first frame update
    void Start()
    {
        gameObject.transform.position = spawn;
        health = max_health;
        Mathf.Clamp(health, 0, max_health);
    }

    // Update is called once per frame
    void Update()
    {
        if (is_dead == false){
            //Wandering mechanic.
            // the enemy locates a point nearby, then repeats.
            if(at_position && player_found == false){
                new_x = gameObject.transform.position.x + UnityEngine.Random.Range(-10,10);
                new_z = gameObject.transform.position.x + UnityEngine.Random.Range(-10,10);
                at_position = false;
            }
            // this section moves the enemy to the selected point.
            if (player_found == false && at_position == false){
                UnityEngine.Vector3 moveto = new UnityEngine.Vector3 (new_x, transform.position.y, new_z);
                Vector3 targetdirection = moveto - transform.position;
                // The step size is equal to speed times frame time.
                float singleStep = turnrad * Time.deltaTime;
                // Rotate the forward vector towards the target direction by one step
                Vector3 newDirection = Vector3.RotateTowards(transform.forward, targetdirection, singleStep, 0.0f);
                // Calculate a rotation a step closer to the target and applies rotation to this object
                transform.rotation = Quaternion.LookRotation(newDirection);
                float current_distance = UnityEngine.Vector3.Distance(transform.position, moveto);
                if(current_distance > 2){
                    transform.position += transform.forward * 3 * Time.deltaTime;
                    is_moving = true;	
                } else {
                    at_position = true;
                    is_moving = false;
                }
            }
        }
        // this section checks if the animal is moving every frame.
        animator.SetBool("IsMoving", is_moving);
        // death mechanic
        if(health <= 0){
            // triggers dead animation, locks down all other functions, turns enemy to "meat" layer.
            is_dead = true;
            animator.SetBool("InAttackRange", false);
            animator.SetBool("IsDead", is_dead);
            detector.SetActive(false);
            enemybody.layer = 10;
            if (starttime == 0)
            {
                starttime = Time.time;
            }
            if (animator.GetCurrentAnimatorStateInfo(0).IsName("PlayDead") == true)
                { // checks if dead anim has started, to trigger timer
                    endtime = Time.time;
                    if (endtime - starttime >= 5.5)
                    { // after timer finishes, the enemy respawns and resets all stats
                        player.GetComponent<Hud>().xp += 50;
                        transform.position = spawn;
                        enemybody.layer = 11;
                        detector.SetActive(true);
                        is_dead = false;
                        animator.SetBool("IsDead", is_dead);
                        health = max_health;
                        starttime = 0;
                        player_found = false;
                    }
                }
        }
        if(is_dead == false && player_found){
            float distance = Vector3.Distance(transform.position,player.position);
            is_moving = true;
            Vector3 nony_player = new Vector3(player.position.x, transform.position.y, player.position.z); // calculates player position but keeps enemy looking directly forwards
            Vector3 targetdirection = nony_player - transform.position;
             // The step size is equal to speed times frame time.
            float singleStep = turnrad * Time.deltaTime;
            // Rotate the forward vector towards the target direction by one step
            Vector3 newDirection = Vector3.RotateTowards(transform.forward, targetdirection, singleStep, 0.0f);
            // Calculate a rotation a step closer to the target and applies rotation to this object
            transform.rotation = Quaternion.LookRotation(newDirection);
		    if(distance > minimum_distance){// checks that the enemy is not too close
			    transform.position += transform.forward * 10 * Time.deltaTime;	
            }
            else{
                is_moving = false;
            }
        }
    }
    void OnTriggerStay(Collider collider){
        //player detection mechanic
        if(is_dead == false){
            float distance = Vector3.Distance(transform.position,player.position);
            if(collider.gameObject.tag == "Player"){
                player_found = true; // stops wandering    
                if(distance < 5){
                    // attacking function
                    animator.SetBool("InAttackRange", true);
                    if(animator.GetCurrentAnimatorStateInfo(0).IsName("EnemyAttack") && attack_lock == false){                       
                        player.GetComponent<Hud>().health -= 5;
                        attack_lock = true;
                    }
                    if(animator.GetCurrentAnimatorStateInfo(0).IsName("Idle")){                       
                        attack_lock = false;
                    }
                } else {
                    animator.SetBool("InAttackRange", false);
                    attack_lock = false;
                }
            }
        }
    }
    void OnTriggerExit(Collider collider){ // this deals with when the player escapes detection range and it goes back to wandering.
        if (collider.gameObject.tag == "Player" && is_dead == false){
            player_found = false;
            is_moving = false;
        }
    }
}
