using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.IO.Compression;
using System.Net.Sockets;
using System.Numerics;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;

public class EnemyMovement : MonoBehaviour
{
    public Transform player;
    private bool player_found = false;
    private bool at_position = false;
    public Animator animator;
    public Animator leg_anim_1;
    public Animator leg_anim_2;
    public Animator leg_anim_3;
    public Animator leg_anim_4;
    public int health;
    public int max_health;
    public double timer = 10;
    public double atktimer = 5;
    private float new_x;
    private float new_z;
    public int minimum_distance;
    bool is_moving = true;
    bool is_dead = false;

    // Start is called before the first frame update
    void Start()
    {
        health = max_health;
        Mathf.Clamp(health, 0, max_health);
    }

    // Update is called once per frame
    void Update()
    {
    if (is_dead == false){
        timer -= 0.01;
        if(timer <= 0 && player_found == false){
            timer = 10;
            new_x = transform.position.x + UnityEngine.Random.Range(-10,10);
            new_z = transform.position.z + UnityEngine.Random.Range(-10,10);
            at_position = false;
        }
        if (player_found == false && at_position == false){
            UnityEngine.Vector3 moveto = new UnityEngine.Vector3 (new_x, transform.position.y, new_z);
            transform.LookAt(moveto);
            float current_distance = UnityEngine.Vector3.Distance(transform.position, moveto);
		    if(current_distance > 2){
			    transform.position += transform.forward * 10 * Time.deltaTime;
                is_moving = true;	
            } else {
                at_position = true;
                is_moving = false;
            }
        }
        leg_anim_1.SetBool("IsMoving", is_moving);
        leg_anim_2.SetBool("IsMoving", is_moving);
        leg_anim_3.SetBool("IsMoving", is_moving);
        leg_anim_4.SetBool("IsMoving", is_moving);
    }
        if(health <= 0){
            is_dead = true;
            animator.SetBool("IsDead", is_dead);
            gameObject.layer = 10;
            if(animator.GetCurrentAnimatorStateInfo(0).IsName("Idle") == false){
                UnityEngine.Vector3 enemyspawn = new UnityEngine.Vector3(UnityEngine.Random.Range(-10,10), 200 ,UnityEngine.Random.Range(-10,10));
                transform.position = enemyspawn;
                gameObject.layer = 11;
                is_dead = false;
                health = max_health;
            }
        }
    }
    void OnTriggerStay(Collider collider){
    if(is_dead == false){
        float distance = UnityEngine.Vector3.Distance(transform.position,player.position);
        if(collider.gameObject.tag == "Player"){
            player_found = true;
            is_moving = true;
            UnityEngine.Vector3 nony_player = new UnityEngine.Vector3(player.position.x, transform.position.y, player.position.z);
		    transform.LookAt(nony_player);
		    if(distance > minimum_distance)	
			    transform.position += transform.forward * 10 * Time.deltaTime;	
            else{
                is_moving = false;
            }
            }
            if(distance < 5){
                atktimer -= 0.01;
                if(atktimer <= 0){
                    player.GetComponent<Hud>().health -= 10;
                    animator.SetBool("InAttackRange", true);
                    atktimer = 5;
                }
            } else {
                animator.SetBool("InAttackRange", false);
            }
        }
    }
    void OnTriggerExit(Collider collider){
        if (collider.gameObject.tag == "Player" && is_dead == false){
            player_found = false;
            is_moving = false;
        }
    }
}

